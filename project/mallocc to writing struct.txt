project doc  liinks-tinyurl.com/3zb7b9ep


i have malloc a sspace, and now want to memcpy multiplpe structss at different offsets
To copy multiple structs into a malloc-allocated memory block at specific offsets, you can use memcpy with pointer arithmetic. Here's how:

Allocate memory using malloc with sufficient size to hold all structs at their intended offsets.
Use memcpy to copy each struct to its desired offset by adding the offset (in bytes) to the base pointer.
Example:
#include <stdio.h>
#include <string.h>
#include <stdlib.h>

typedef struct {
    int id;
    char name[16];
} MyStruct;

int main() {
    // Allocate enough space for two structs with offsets
    size_t total_size = 256; // Ensure this is large enough
    void *buffer = malloc(total_size);
    if (!buffer) {
        fprintf(stderr, "Allocation failed\n");
        return 1;
    }

    MyStruct s1 = {1, "Alice"};
    MyStruct s2 = {2, "Bob"};

    // Copy first struct at offset 0
    memcpy((char*)buffer + 0, &s1, sizeof(MyStruct));

    // Copy second struct at offset 64
    size_t offset2 = 64;
    memcpy((char*)buffer + offset2, &s2, sizeof(MyStruct));

    // Retrieve and verify
    MyStruct *retrieved1 = (MyStruct*)((char*)buffer + 0);
    MyStruct *retrieved2 = (MyStruct*)((char*)buffer + offset2);

    printf("Retrieved: %d, %s\n", retrieved1->id, retrieved1->name);
    printf("Retrieved: %d, %s\n", retrieved2->id, retrieved2->name);

    free(buffer);
    return 0;
}

Key Points:
Cast buffer to char* before adding offsets, since pointer arithmetic on void* is not allowed in C.
Ensure total allocated size is large enough to avoid buffer overflow.
Offsets must be within bounds of the allocated memory.
No overlap between regions unless using memmove.
